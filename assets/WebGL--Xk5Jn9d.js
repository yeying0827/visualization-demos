import{t as g,a as R}from"./polygon-bEkpc2Au.js";class u{constructor(r,o,a){this.gl=r,this.vertex=o,this.fragment=a,this.program=null,this.createWebGLProgram()}createWebGLProgram(){const{gl:r,vertex:o,fragment:a}=this,t=r.createShader(r.VERTEX_SHADER);r.shaderSource(t,o),r.compileShader(t);const i=r.createShader(r.FRAGMENT_SHADER);r.shaderSource(i,a),r.compileShader(i);const e=r.createProgram();r.attachShader(e,t),r.attachShader(e,i),r.linkProgram(e),r.useProgram(e),r.getShaderParameter(t,r.COMPILE_STATUS)||alert(r.getShaderInfoLog(t)),r.getProgramParameter(e,r.LINK_STATUS)||alert(r.getProgramInfoLog(e)),this.program=e}bufferPosition(r){const{gl:o}=this;r instanceof Float32Array||(r=new Float32Array(r));const a=o.createBuffer();o.bindBuffer(o.ARRAY_BUFFER,a),o.bufferData(o.ARRAY_BUFFER,r,o.STATIC_DRAW)}readPosition(r="position"){const{gl:o,program:a}=this,t=o.getAttribLocation(a,r);o.vertexAttribPointer(t,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(t)}setUniforms(r){const{gl:o,program:a}=this;let t;r.forEach(i=>{switch(t=o.getUniformLocation(a,i[0]),i[2]){case"4fv":o.uniform4fv(t,i[1]);break;case"2fv":o.uniform2fv(t,i[1]);break;case"1f":o.uniform1f(t,i[1]);break}})}drawSimple(r,o=2,a){const{gl:t}=this;r instanceof Float32Array||(r=new Float32Array(r));const i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,r,t.STATIC_DRAW);const e=t.getAttribLocation(this.program,"position");t.vertexAttribPointer(e,o,t.FLOAT,!1,0,0),t.enableVertexAttribArray(e),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(a||t.LINE_STRIP,0,r.length/o)}drawPolygon(r,o,a=[["uColor",[1,0,0,1],"4fv"]],t,i=!0){const{gl:e,program:f}=this,A=new Float32Array(r),n=new Uint16Array(o),c=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,c),e.bufferData(e.ARRAY_BUFFER,A,e.STATIC_DRAW);const s=e.getAttribLocation(f,"position");e.vertexAttribPointer(s,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(s),this.setUniforms(a);const l=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,l),e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW),i&&e.clear(e.COLOR_BUFFER_BIT),e.drawElements(t||e.TRIANGLES,n.length,e.UNSIGNED_SHORT,0)}drawTriangle(r,{color:o}={}){const{gl:a,program:t}=this;this.bufferPosition(r.flat());const i=a.getAttribLocation(t,"position");a.vertexAttribPointer(i,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(i);let e=a.getUniformLocation(t,"uColor");a.uniform4fv(e,o),a.drawArrays(a.TRIANGLES,0,r.length)}drawPolygonTess2(r,{color:o,rule:a=R.WINDING_ODD}={}){g(r,a).forEach(i=>this.drawTriangle(i,{color:o}))}}export{u as W};
