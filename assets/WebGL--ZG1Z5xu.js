import{t as c,a as R}from"./polygon-JGRpudzN.js";class _{constructor(t,r,o){this.gl=t,this.vertex=r,this.fragment=o,this.program=null,this.createWebGLProgram()}createWebGLProgram(){const{gl:t,vertex:r,fragment:o}=this,e=t.createShader(t.VERTEX_SHADER);t.shaderSource(e,r),t.compileShader(e);const i=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(i,o),t.compileShader(i);const a=t.createProgram();t.attachShader(a,e),t.attachShader(a,i),t.linkProgram(a),t.useProgram(a),t.getShaderParameter(e,t.COMPILE_STATUS)||alert(t.getShaderInfoLog(e)),t.getProgramParameter(a,t.LINK_STATUS)||alert(t.getProgramInfoLog(a)),this.program=a}bufferPosition(t){const{gl:r}=this;t instanceof Float32Array||(t=new Float32Array(t));const o=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,o),r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)}readPosition(t="position"){const{gl:r,program:o}=this,e=r.getAttribLocation(o,t);r.vertexAttribPointer(e,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(e)}setUniforms(t){const{gl:r,program:o}=this;let e;t.forEach(i=>{switch(e=r.getUniformLocation(o,i[0]),i[2]){case"4fv":r.uniform4fv(e,i[1]);break;case"2fv":r.uniform2fv(e,i[1]);break;case"1f":r.uniform1f(e,i[1]);break}})}drawSimple(t,r=2,o){const{gl:e}=this;t instanceof Float32Array||(t=new Float32Array(t));const i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW);const a=e.getAttribLocation(this.program,"position");e.vertexAttribPointer(a,r,e.FLOAT,!1,0,0),e.enableVertexAttribArray(a),e.clear(e.COLOR_BUFFER_BIT),e.drawArrays(o||e.LINE_STRIP,0,t.length/r)}drawPolygon(t,r,o=[["uColor",[1,0,0,1],"4fv"]],e,i=!0){const{gl:a,program:f}=this,T=new Float32Array(t),n=new Uint16Array(r),E=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,E),a.bufferData(a.ARRAY_BUFFER,T,a.STATIC_DRAW);const s=a.getAttribLocation(f,"position");a.vertexAttribPointer(s,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(s),this.setUniforms(o);const A=a.createBuffer();a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,A),a.bufferData(a.ELEMENT_ARRAY_BUFFER,n,a.STATIC_DRAW),i&&a.clear(a.COLOR_BUFFER_BIT),a.drawElements(e||a.TRIANGLES,n.length,a.UNSIGNED_SHORT,0)}drawTriangle(t,{color:r}={}){const{gl:o,program:e}=this;this.bufferPosition(t.flat());const i=o.getAttribLocation(e,"position");if(o.vertexAttribPointer(i,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(i),r){let a=o.getUniformLocation(e,"uColor");o.uniform4fv(a,r)}o.drawArrays(o.TRIANGLES,0,t.length)}drawPolygonTess2(t,{color:r,rule:o=R.WINDING_ODD}={}){c(t,o).forEach(i=>this.drawTriangle(i,{color:r}))}drawCells(t,r,o=!0){const{gl:e}=this,i=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,i),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),o&&e.clear(e.COLOR_BUFFER_BIT),e.drawElements(r||e.TRIANGLES,t.length,e.UNSIGNED_SHORT,0)}createTexture(t){const{gl:r}=this,o=r.createTexture();return r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,o),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR),r.bindTexture(r.TEXTURE_2D,null),o}setTexture(t,r,o=0){const{gl:e,program:i}=this;e.activeTexture(e.TEXTURE0+o),e.bindTexture(e.TEXTURE_2D,t);const a=e.getUniformLocation(i,r);e.uniform1i(a,o),e.bindTexture(e.TEXTURE_2D,null)}}export{_ as W};
