import{s as c,c as d,a as h,b as n,m as p,d as e,e as f,i as y,l as a,f as g,g as u,h as q,n as z,j as l,k as M,o as m,p as x,t as A,q as D,r as w,u as L,v as Q,w as R}from"./Vec3Func-Lanfgsq-.js";class o extends Array{constructor(t=0,s=t,i=t){return super(t,s,i),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,s=t,i=t){return t.length?this.copy(t):(c(this,t,s,i),this)}copy(t){return d(this,t),this}add(t,s){return s?h(this,t,s):h(this,this,t),this}sub(t,s){return s?n(this,t,s):n(this,this,t),this}multiply(t){return t.length?p(this,this,t):e(this,this,t),this}divide(t){return t.length?f(this,this,t):e(this,this,1/t),this}inverse(t=this){return y(this,t),this}len(){return a(this)}distance(t){return t?g(this,t):a(this)}squaredLen(){return u(this)}squaredDistance(t){return t?q(this,t):u(this)}negate(t=this){return z(this,t),this}cross(t,s){return s?l(this,t,s):l(this,this,t),this}scale(t){return e(this,this,t),this}normalize(){return M(this,this),this}dot(t){return m(this,t)}equals(t){return x(this,t)}applyMatrix3(t){return A(this,this,t),this}applyMatrix4(t){return D(this,this,t),this}scaleRotateMatrix4(t){return w(this,this,t),this}applyQuaternion(t){return L(this,this,t),this}angle(t){return Q(this,t)}lerp(t,s){return R(this,this,t,s),this}clone(){return new o(this[0],this[1],this[2])}fromArray(t,s=0){return this[0]=t[s],this[1]=t[s+1],this[2]=t[s+2],this}toArray(t=[],s=0){return t[s]=this[0],t[s+1]=this[1],t[s+2]=this[2],t}transformDirection(t){const s=this[0],i=this[1],r=this[2];return this[0]=t[0]*s+t[4]*i+t[8]*r,this[1]=t[1]*s+t[5]*i+t[9]*r,this[2]=t[2]*s+t[6]*i+t[10]*r,this.normalize()}}export{o as V};
