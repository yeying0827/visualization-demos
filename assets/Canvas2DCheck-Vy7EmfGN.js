import{_ as y,f as m,C,m as P,V as S,n as c,o as x,c as w,F as D,p as I,a as k,b as i}from"./index-3qJZoPZt.js";const r=s=>(I("data-v-1d600fd3"),s=s(),k(),s),B=r(()=>i("h3",null,"Canvas2D判断边界",-1)),b=r(()=>i("canvas",{width:"512",height:"512"},null,-1)),V={__name:"Canvas2DCheck",setup(s){return m(()=>{const e=document.querySelector("canvas"),l=e.getContext("2d"),t=new C(l),o=[[-.7,.5],[-.4,.3],[-.25,.71],[-.1,.56],[-.1,.13],[.4,.21],[0,-.6],[-.3,-.3],[-.6,-.3],[-.45,0]].map(n=>[n[0]*256,n[1]*256]),f=o.flat(),d=P(f);t.fillPolygon(o),t.fillPolygon([[100,100],[100,200],[150,200]],{fillStyle:"blue"});const{left:p,top:u}=e.getBoundingClientRect();e.addEventListener("mousemove",n=>{const{x:_,y:g}=n,v=_-p,h=g-u;l.clearRect(-256,-256,512,512);const a=new S(v-e.width/2,e.height/2-h);c({vertices:[[100,100],[100,200],[150,200]],cells:[0,1,2]},a)||c({vertices:o,cells:d},a)?(t.fillPolygon(o,{fillStyle:"green"}),t.fillPolygon([[100,100],[100,200],[150,200]],{fillStyle:"orange"})):(t.fillPolygon(o),t.fillPolygon([[100,100],[100,200],[150,200]],{fillStyle:"blue"}))})}),(e,l)=>(x(),w(D,null,[B,b],64))}},N=y(V,[["__scopeId","data-v-1d600fd3"]]);export{N as default};
